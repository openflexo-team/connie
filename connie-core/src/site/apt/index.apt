 -----
 Openflexo Connie
 -----
 The Openflexo team
 -----

Introduction to CONNIE

  CONNIE is a Java library allowing to define and execute an expression-based language over a generic API.

  This language is generally used to connect heterogeneous technologies with the same API.

  The purpose of CONNIE is to offer the ability to:

  * Navigate through a graph of objects mixing heterogeneous technologies.
  
  * Define strong-typed paths and expressions.

  * Execute strong-typed paths and expressions.

Getting started with Connie

  [[1]] Define a binding strategy
  
  You should first think of which binding strategy you apply to objects and types you will connect. 
  To do so, you have to choose a {{{./apidocs/org/openflexo/connie/BindingFactory.html}BindingFactory}}

  More about defining a BindingStrategy in {{{./DefineBindingStrategy.html}Defining a BindingStategy}}

  [[2]] Define Bindable context
  
  A binding is defined in the context of a {{{./apidocs/org/openflexo/connie/Bindable.html}Bindable}}. 
  A <<<Bindable>>> basically references a <<<BindingFactory>>> (which defines how bindings are defined) and a <<<BindingModel>>> (which defines the evaluation context, also called environment).
  
  You have to define a {{{./apidocs/org/openflexo/connie/BindingModel.html}BindingModel}}, which is the environment beeing considered at run-time.
  A <<<BindingModel>>> defines a list of  {{{./apidocs/org/openflexo/connie/BindingVariable.html}BindingVariable}}. A <<<BindingVariable>>> basically has a name and a type.
  
  More about defining a Bindable context in {{{./DefineBindableContext.html}Defining Bindable context}}
  
  [[3]] Define <<<DataBinding>>> objects

  We are at the core level of Connie. 
  A {{{./apidocs/org/openflexo/connie/DataBinding.html}DataBinding}} is the abstraction of an evaluable 
  expression which might be executed in a {{{./apidocs/org/openflexo/connie/BindingEvaluationContext.html}BindingEvaluationContext}}.
  
  A DataBinding is defined in the context of a {{{./apidocs/org/openflexo/connie/Bindable.html}Bindable}}, which is the owner of <<<DataBinding>>> 
  (remember that <<<Bindable>>> references both a <<<BindingFactory>>> and a <<<BindingModel>>>)
  
  A {{{./apidocs/org/openflexo/connie/DataBinding.html}DataBinding}} might be created using this constructor:
  
+----------------------------------------------------
public DataBinding(String unparsed, Bindable owner, Type declaredType, BindingDefinitionType bdType);
+----------------------------------------------------  

  For example:
  
+----------------------------------------------------
Bindable myBindable = ...; // myBindable should be somewhere initialized
DataBinding<String> myBinding = new DataBinding<String>("person.name",myBindable,String.class,BindingDefinitionType.GET_SET);
+----------------------------------------------------  
  
  Initialize a <<<DataBinding>>>:
  
  * whose owner is the <<<myBindable>>> variable (a <<<Bindable>>> instance)
  
  * where declared type (type of expression defined by the binding) is <<<String>>>
  
  * where binding is executable both as readable and settable
  
  * where expression is set to <<<person.name>>>
  
  To be valid, <<<myBindable>>> variable should define:
  
  * a <<<BindingModel>>> declaring a <<<BindingVariable>>> called <<<'person'>>> (suppose that type of this variable is reflected by <<<Person>>> Java class)
  
  * a suitable <<<BindingFactory>>> allowing to browse <<<'name'>>> from a <<<Person>>> type (this might be implemented by <<<Person>>> Java class if this class defines both <<<getName()>>> and <<<setName(String)>>> methods, and if <<<JavaBindingFactory>>> is used)

  Validity of a <<<DataBinding>>> might be tested using <<<isValid()>>> method.

  More about defining a <<<DataBinding>>> objects in {{{./DefineDataBinding.html}Defining DataBinding objects}}

  [[4]] Execute <<<DataBinding>>> objects

  Once your <<<DataBinding>>> is defined, you can "execute" it in a {{{./apidocs/org/openflexo/connie/BindingEvaluationContext.html}BindingEvaluationContext}}.
  
  <<<BindingEvaluationContext>>> is the run-time environment and must implement variable resolving. 
  Only this method need to be implemented:

+----------------------------------------------------
public Object getValue(BindingVariable variable);
+----------------------------------------------------  
   
  Evaluation of <<<DataBinding>>> is typically performed using this code:

+----------------------------------------------------
DataBinding<String> myBinding = ...; // myBinding has been initialized above
BindingEvaluationContext evaluationContext = ...; // evaluationContext should be somewhere initialized
String value = myBinding.getBindingValue(evaluationContext);
+----------------------------------------------------  
  
  This code computes the value of <<<"person.name">>>.
  
  Supposing that this binding has been declared as settable (here with <<<BindingDefinitionType.GET_SET>>>), we might assign a value to the name of a <<<Person>>> while invoking this code:
  
+----------------------------------------------------
DataBinding<String> myBinding = ...; // myBinding has been initialized above
BindingEvaluationContext evaluationContext = ...; // evaluationContext should be somewhere initialized
myBinding.setBindingValue("aName",evaluationContext);
+----------------------------------------------------  

  General execution:
 
+----------------------------------------------------
DataBinding<String> myBinding = ...; // myBinding has been initialized above
BindingEvaluationContext evaluationContext = ...; // evaluationContext should be somewhere initialized
Object value = myBinding.execute(evaluationContext);
+----------------------------------------------------  
  
  More about executing <<<DataBinding>>> objects in {{{./ExecuteDataBinding.html}Executing DataBinding objects}}
  
